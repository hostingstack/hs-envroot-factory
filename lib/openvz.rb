require 'fileutils'

class OpenVZError < RuntimeError
  attr_reader :cmdline
  def initialize(message, cmdline = nil)
    super(message)
  end
end

class OpenVZVM
  attr_reader :path_root, :container_id
  def initialize(container_id, path_root, path_private)
    @container_id = container_id
    @path_root = path_root
    @path_private = path_private
  end

  def start
    vzctl('start')
  end

  def stop
    vzctl('stop', '--fast')
  end

  def destroy
    vzctl('destroy')
  end

  def configure(key, value)
    vzctl('set', '--%s %s' % [key, value])
  end

  def exec(command)
    vzctl('exec2', command)
  end

  def spawn(command, &block)
    cmdline = "vzctl exec2 #{@container_id} \"#{command.gsub("\"", "\\\"")}\""
    output = SupportShared.spawn(cmdline, &block)
    unless $?.exitstatus == 0
      raise OpenVZError.new(output, cmdline)
    end
    output
  end

  def clean_config
    FileUtils.rm("#{$config[:openvz_etc]}/conf/#{@container_id}.conf", :force => true)
    FileUtils.rm("#{$config[:openvz_etc]}/conf/#{@container_id}.mount", :force => true)
  end

  def add_ip(ip)
    configure('ipadd', ip)
  end

  protected

  def vzctl(cmd, args = '')
    cmdline = "vzctl #{cmd} #{@container_id} #{args} 2>&1"
    output = `#{cmdline}`
    unless $?.exitstatus == 0
      raise OpenVZError.new(output, cmdline)
    end
    output
  end

  def link_config(config_path, mount_script)
    clean_config(@container_id)
    begin
      FileUtils.symlink(config_path, "#{$config[:openvz_etc]}/conf/#{@container_id}.conf")
      FileUtils.symlink(mount_script, "#{$config[:openvz_etc]}/conf/#{@container_id}.mount") if mount_script
    rescue Errno::ENOENT => e
      raise OpenVZError.new("Container configuration error: #{e.message}")
    end
  end

end

class OpenVZ
  def self.new_vm(root_tgz, ctid)
    begin
      f = File.new("#{$config[:openvz_etc]}/conf/#{ctid}.conf", File::CREAT|File::WRONLY|File::EXCL, 0644)
    rescue => e
      raise OpenVZError.new("CTID #{ctid} is not free")
    end
    path_root = "#{$config[:openvz_root]}/#{ctid}"
    path_private = "#{$config[:openvz_private]}/#{ctid}"
    f << <<-EOT
# Automatically generated by envroot-factory
# UBC parameters (in form of barrier:limit)
KMEMSIZE="14372700:14790164"
LOCKEDPAGES="256:256"
PRIVVMPAGES="262144:314572"
SHMPAGES="21504:21504"
NUMPROC="240:240"
PHYSPAGES="0:9223372036854775807"
VMGUARPAGES="33792:9223372036854775807"
OOMGUARPAGES="26112:9223372036854775807"
NUMTCPSOCK="360:360"
NUMFLOCK="188:206"
NUMPTY="16:16"
NUMSIGINFO="256:256"
TCPSNDBUF="1720320:2703360"
TCPRCVBUF="1720320:2703360"
OTHERSOCKBUF="1126080:2097152"
DGRAMRCVBUF="262144:262144"
NUMOTHERSOCK="360:360"
DCACHESIZE="3409920:3624960"
NUMFILE="9312:9312"
AVNUMPROC="180:180"
NUMIPTENT="128:128"

# Disk quota parameters (in form of softlimit:hardlimit)
DISKSPACE="1048576:1153024"
DISKINODES="200000:220000"
QUOTATIME="0"

# CPU fair sheduler parameter
CPUUNITS="1000"

HOSTNAME="install"
VE_ROOT="#{path_root}"
VE_PRIVATE="#{path_private}"
OSTEMPLATE="debian-5.1-bootstrap"
ORIGIN_SAMPLE="vps.large"
    EOT
    f.close
    FileUtils.mkdir(path_root)
    FileUtils.mkdir(path_private)

    # unpack template as rootfs
    cmdline = "tar -C #{path_private} -xzp -f #{root_tgz} 2>&1"
    output = `#{cmdline}`
    unless $?.exitstatus == 0
      raise OpenVZError.new(output, cmdline)
    end

    return OpenVZVM.new(ctid, path_root, path_private)
  end

end
